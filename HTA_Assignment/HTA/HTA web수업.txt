부트스트랩 프레임워크
div - row - col로 틀을 잡은 후 개발을 진행함

JSP 환경설정
1. APACHE.ORG -> TOMCAT -> DOWNLOAD -> 10버전으로 다운로드(32/64BIT 윈도우 서비스) ->
HOST MANAGER, EXAMPLES 체크 ->서버 80으로 변경,  service name : tomcat10으로 변경, 이름,비번 입력

web server와 web Application Server는 다르다
WAS: 웹어플리케이션 프로그램을 실행해주는 파일이 반드시 필요하다
자바의 WAS = JSP


o 새로운 프로젝트 생성시 나온는 context root는 프로젝트 간 구분을 해주는 기능이다.(별도 지정안하면 프로젝트명과 동일)
	배포되는 프로젝트 간 같은 context root를 가지면 안된다.
	배포되어 있는 프로젝트 변경할 경우 servers에서 톰캣 클릭-> modules에서 변경 가능하다.
	or 프로젝트 우클릭 properties -> web project settings에서 바꿔도 된다.
	context root변경시 배포되어있는 프로젝트를 톰캣에서 제거 후 다시 배포해야한다.

ㅇ url형식
http://jhta.co.kr/page/edu/view.php?type=1&id=179
HTTP: 프로토콜
jhta.co.kr: 호스트명, 서버명, 도메인네임
/page/edu/view.php : 실제 자원의 위치
?뒤 : Query String


MyBatis 구현 구성
* folder
src/main : 실제 구현하는 파일
	>package
	com.sample.util
	SqlSessionFactoryBuilder() : mybatis-config.xml의 정보를 토대로 SQL 세션 팩토리
				(SQL세션을 생산)를 만들어줌
src/resources : 환경설정, 프로그램 구현에 필요한 파일들이 포함되는 폴더
	> package
	mybatis -> mybatis-config.xml
	mybatis.mappers -> products.xml
	log4.propertis
웹페이지와 웹 어플리케이션
ㅇ웹페이지
- 정적 자원 제공(정적 html)
- 미리 작성해둔 html문서가 응답으로 제공
ㅇ웹 어플리케이션
- 동적 자원(동적 html 컨텐츠)제공
- 동적 웹 컨텐츠를 제공하는 프로그램(Servlet/jsp)이다.


jsp파일의 실행순서(jsp는 자바코드로 변환 후 실행되며, 변환은 tomcat에서 알아서 해준다)
객체의 생성, 유지관리, 폐기 모두 tomcat이 수행해주며 이러한 기능을 수행하는 것을 Container라고 부른다.


1. 브라우저가 서버에 요청 URL을 보낸다
	http://localhost/sample/hello.jsp

2. 서버는 요청 URL을 분석해서 hello.jsp를 찾는다
	Tomcat 10.0/wtpwebapps/sample/hello.jsp를 발견

3. 서버는 hello.jsp에 대한 자바 실행파일을 찾는다.
	Tomcat 10.0/work/Catalina/localhost/sample/org/apache/jsp/hello_jsp.class를 찾는다
	1. hello_jsp.class가 없으면
		hello.jsp를 자바코드로 변환해서 hello_jsp.java 파일을 생성한다.
		hello_jsp.java를 컴파일해서 실행파일 hello_jsp.class 파일을 생성한다. 
		hello_jsp.class(설계도)를 메모리에 로딩한다.
	2. hello_jsp.class가 있으면  
		hello_jsp.class(설계도)를 메모리에 로딩한다.

4. hello_jsp.class로 객체를 생성하고 생성된 객체의 기본 생성자 메소드를 실행한다.
	* 기본 생성자 메소드는 객체의 초기화 작업을 수행하지 않음

5. 생성된 객체의 _jspInit() 메소드를 실행해서 객체의 초기화 작업을 수행한다.

6. 생성된 객체의 _jspService(HttpServletRequest request, HttpServletResponse response) 메소드를 실행한다.
	* _jspService(req,res) 메소드는 클라이언트의 요청을 처리하고, 동적 HTML 컨텐츠를 응답으로 제공한다.
	* hello.jsp파일의 내용이 변경되지 않으면 생성된 객체는 웹서버에서 계속 유지된다.
	* 클라이언트로부터 hello.jsp에 대한 요청을 받으면 6번 작업을 계속 반복한다.
	* _jspService(req,res) 메소드 실행 중 오류가 발생하면 
	- 500 : 자바 코드가 이상할 떄
	- 404 : url 잘못입력(400번대는 클라이언트의 요청실수)

7. hello.jsp의 내용이 변경되면 생성된 객체의 _jspDestroy() 메소드를 실행한 후 객체를 제거한다.
	* 변경된 hello.jsp를 새로 요청하면 3~5번작업을 다시 실행한다.
	* 5번 까지의 작업이 완료되면 다시 6번작업을 실행해서 클라이언트의 요청을 처리한다.





디렉티브(지시어)
- jsp 페이지에 대한 설정 정보를 정의한다
<%@ page  	%> jsp 페이지에 대한 정보를 설정한다
<%@ include  	%> jsp 페이지가 포함하는 다른 JSP페이지를 정의한다
<%@ taglib  	%> jsp 페이지가 사용할 태그라이브러리를 정의한다

선언문 		<%! 선언 %> 	인스턴스 변수, 메서드, 클래스 정의
스크립틀릿 	<%스크립틀릿%> 	로컬변수, 반복문, 객체조작, 산술 연산 등
식 		<%=식%> 	출력

스크립틀릿 :<% %>
- jsp 페이지내에 자바코드를 삽입할 떄 사용



자바의 데이터베이스 엑세스 기술
- JDBC
- SQL Mapper Framework(객체 - SQL 매핑)

	* iBatis
	* MyBatis(ibatis3.0)

- ORM (Object Relation Mapping, 객체 - Table 매핑 => 객체 생성시 자동으로 테이블이 매칭됨)
	* JPA
	* hibernate

라이브러리 vs 프레임워크
라이브러리 : 어플리케이션이 라이브러리를 갖다 씀
프레임워크 : 개발방식을 구현하여, 프레임워크에서 제시한 규칙에 맞춰 개발을 함

jsp 템플릿 추가하기 : window -> preference -> jsp files -> editor -> template

============마이바티스===============

파일다운 후 압축 풀어서
WEB_INF - LIB - MYBATIS-3.5.7-LIB에 JAR파일 다 갖다놓음

상대주소 표기법 : <a href="form.jsp"> -> 현재주소 + form.jsp
절대주소 표기법 (주소가 /로 시작) :  <a href="/sample-mybatis/product/form.jsp" -> 절대주소
 - nav와 같이 항상 고정된 주소를 필요로하는 곳에 사용

- SQL Mapper Framework
* SQL실행에 필요한 정보를 알려주면 커넥션, PSTMT, RS 자기가 알아서 함
SQL실행에 필요한 정보
 	- SQL실행에 필요한 값을 가지고 있는 객체
	- 값을 저장하고 있는 변수명과 그 값이 치환될 위치

마이바티스 프로젝트생성
- source project생성 (src/main/resources)
 -> general->folder 선택
 -> 파일명 mybatis/mappers로 작성 

CODEC: 인코딩과 디코딩을 합쳐 부르는말, 암호화와 관련된 기능 있음 
     *DB에서
	- VARCHAR : 크기를 64로 해놓아도 한글자 넣으면 한글자에 맞춰서 사이즈 조정
	- CHAR : 데이터 크기가 고정돼있음 64로 해놓으면 무조건 64// PASSWORD의 경우 암호화가 필요 -> 무조건 64바이트에 맞춤

     - 단방향 암호화
	평문 -> 암호문
	암호문 -> 평문 (불가능)

     - 양방향 암호화
	평문 -> 암호화
	암호문 -> 평문
	(공개키, 개인키, 	나의 개인키로 암호화를 하면 나의 공개키로만 암호화를 풀 수 있고,
			나의 공개키로 암호화를 하면 나의 개인키로만 암호화를 풀 수 있다. => 자기부정을 할 수 없다)
	- 대칭형 (key가 같음)
		평문 + key-> 암호문
		암호문 + key-> 평문
	- 비대칭형 
		평문 + key1 -> 암호문 
		암호문 + key2 -> 평문
	

*페이징처리
	한 화면당 출력할 데이터 갯수 정하기
		final int ROWS  = 5;
	요청한 페이지 번호 알아내기
		int pageNo = Common.stringToNumber(request.getParameter("page"),1);

	// 화면에 출력할 데이터 조회하기
	1. 조회구간 계산하기
		int beginIndex = (pageNo -1)*ROWS +1;
		int endIndex = pageNo*ROWS
		Map<String, Object> condition = new HashMap<>();
		condition.put("beginIndex", beginIndex);
		condition.put("endIndex", endIndex);
	2. 조회구간에 속하는 데이터 조회하기 
		List<Product> products = productDao.getProducts(condition);
	// 화면에 페이지번호 출력하기
	1. 총 데이터 갯수 조회하기
		int totalRows = productDao.getRowsCount();
	2. 총 페이지 갯수 조회하기
		int totalPages = (int) Math.ceil((double) totalRows/ROWS);
	3. 총 페이지 갯수만큼 페이지번호 출력하기
		<%
		   for (int num =1; num<=totalPages; num++){
	  
		%>
			<a href="list.jsp?page=<%=num %>"><%=num %></a>
		<%
		   }
		%>


*Session
클라이언트마다 고유하게 갖고 있음 (톰캣이 생성해줌)
session은 기본 30분으로 시간제한이 있다.(은행은 5분, 10분내외 / 포탈은 하루종일 등등)
sessionId를 아는 것만으로는 session객체에 접근할 수 없다. (세션이 생성될 떄 같이 생성되는 쿠키도 필요하다)
로그인 하기 전 사용자도 세션을 갖고 있다.

*jsp중 redirect 할 경우 return 넣는 이유
브라우저 전체를 닫는 순간 브라우저는 세션id를 읽어버린다(
//입력값 유효성 검증
	if(title.isBlank()||content.isBlank()){
		 response.sendRedirect("detail.jsp?no="+productNo+"&page="+pageNo+"&fail=blank");
		 return; //응답을 보내고 insertreview를 종료해야 하기때문에 반드시 return을 적어주어야 한다.
	}
----------------------
MVC패턴:  모델(데이터)-뷰(화면)-컨트롤러(자바로직)를 나눠서 개발하는것
MODEL2 개발방식 : MVC패턴을 웹개발에 적용해서 개발한 것

클라이언트 요청 -> 서블릿이 받음 -> DAO등 호출 시 데이터 GET -> 포워딩으로 다음 JSP에 전달 (Request와 Response가 함꼐 전달)
 
모델 : 데이터를 가공 또는 획득하는것 / 데이터 그 자체
컨트롤러 : SERVLET이 담당 (JSP에서 서블릿코드에 들어간걸 컨트롤러라고 보면 됨) / 서블릿만이 클라이언트의 요청 시 수행되도록 한다(JSP로도 구현가능하지만 분리함)
뷰 : JSP (자바코드가 안들어가게 만든다)

EL: JSP에서 자바코드를 대체해서 표현할 수 있는 표현식 
 -> 논리연산, 사칙연산, 비교안산, 삼항연산 등 사용 가능
 -> 내장객체를 가지고 있다.


 - 형식 : ${param.이름}   -> parameter 검색시
	- <% String userName = request.getParameter("name") %>
	- <p>${param.name}</p>
	- param : Request의 parameter를 가리킨다
 - 형식 : ${(RequestScope.)속성명}
	- 속성을 검색할 때는 requestScope.속성명과 같이 적지만 requestScope.는 생략한다. (속성 검색시 동일한 명칭을 알아서 찾아주기 때문)
	- 맵이 올 경우, ${속성명, key}
	- 객체 올 경우, ${객체명.필드명(실제로는 getter메소드(getNo emd..)}
	- list, 배열 올 경우, ${속성명[index]} => 둘 다 배열 형태로/ 반복문은 JSTL에서 


WEB-INF 에 jsp가 있으면 경로가 맞더라도 url을 통해 직접 들어갈 수 없다. 
(톰캣내부에서 web-inf라는 스트링을 통해서는 접근 못하도록 설정되어있다.)
반드시 forwarding을 통해서만 jsp파일에 접근이 가능해진다

서블릿의 맵핑은 무조건 '/'로 시작한다.

서블릿에서의 최종작업이 저장 변경 삭제일 경우 -> redirect한다. (화면전환 필요 없으므로)
데이터의 수정없이 화면간 이동이 필요할 경우 -> forward