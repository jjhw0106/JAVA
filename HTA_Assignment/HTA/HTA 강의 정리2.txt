=================0412==================================

-------------------익명클래스-------------------
// 이름있는 상위클래스로 객체 생성 - 익명클래스 아님
상위클래스명 참조변수 = new 상위클래스명();

// 인터페이스로 객체 생성 = 문법 오류
인터페이스명 참조변수 = new 인터페이스명();

// 이름있는 상위클래스로 익명클래스 정의 및 익명객체 생성하기
상위클래스명 참조변수 = new 상위클래스명(){
    // 맴버변수 추가 정의
    // 상위클래스의 메소드 재정의
}

참조변수가 참조하는 객체는 상위클래스와는 다른 구성요소를 가지는 객체다.
참조변수가 참조하는 객체는 실질적인 설계도(클래스)가 존재하는 것이 아니다.

// 인터페이스로 익명클래스 정의 및 익명객체 생성하기
// 지정된 인터페이스의 모든 메소드를 재정의했기 때문에 완전한 설계도가 즉석에서 정의된 것임
// 결론, 객체 생성이 가능해짐

인터페이스명 참조변수 = new 인터페이스() { 				//문법오류아님
	//모든 추상메소드 재정의 - 완전 설계도
	//일회용 객체생성에만 사용 가능하며, 객체를 추가할 때 마다 구현을 새로 해주어야 한다
};
//참조변수가 참조하는 객체는 인터페이스의 모든 추상메소드를 즉석에서 재정의한 완전한 설계도로 만들어진 객체를 참조한다.
//참조변수가 참조하는 객체는 인터페이스를 구현한 하위 객체다

//익명클래스는 반드시 상위클래스나 인터페이스를 기반으로 만들어진다.
  

이벤트 모델 
  ㅇ GUI 프로그램에서 사용자와 프로그램이 서로 상호작용하도록 구현할 때 사용되는 모델

  ㅇ 주요 구성요소
	* Event
		- 사용자가 프로그램에서 어떤 행위를 했을 때 발생하는 사건
		- 행위 : 마우스 움직임, 클릭, 키보드 입력 등등..
		- 사용자의 실행한 행위에 대한 정보를 갖고 있는 것이 Event이다.
		- 사용자의 프로그램에서 어떤 행위를 할 때마다 Event라는 것이 만들어진다.
		- Event는 행위의 종류, 어디에서 했는지 등의 정보가 포함되어 있다.

	* Event Source
		- Event가 발생하는 곳
		- 버튼, 메뉴, 아이콘, 콤보박스, 체크박스, 입력필드 등과 같은 각종 컴포넌트(GUI 프로그램의 구성 부품)

	* Event Handler( Event Listener)
		- Event가 발생했을 때 실행할 작업을 정의해 놓은 것
		- 자바에서는 Event의 종류에 따라서 EventHandler를 각각 구현해야 한다.		
		- Event Handler()로 구현해 놓은 작업은 해당 이벤트가 발생하면 JVM이 알아서 실행한다.

  ㅇ  이벤트를 이용한 상호작용 처리 프로세스
	1. 이벤트가 발생할 Event Source를 정한다.
	2. 해당 Event  Source에서 발생하는 Event 중에서 어떤 Event를 사용할지 정한다.
	3. 지정한 Event가 발생했을 때 Event Handler를 구현한다.
	4. 3번에서 작성한 EventHandler를 1번에서 지정한 Event Source와 연결한다.
	5. 1번에서 지정한 Event Source에서 2번에서 지정한 이벤트가 발생하면
	   3번에서 작성한 EventHandle를 실행한다.

=>이벤트 핸들러의 특징: gui상 해당 버튼이 위치한 그 위치에서만 실행가능하다. 즉 중복해서 만들 필요가 없다.
Ex)그림판의 동그라미는 [도형]의 동그라미 모양을 클릭했을 때만 실행되면 된다.

자바로 GUI 구현시 Swing을 쓴다

=================0413==================================
toString() : 객체의 주소에 따라 고유한 문자열을 생성하여 반환
재정의해서 매우 자주 사용한다. Generate toString도 자주 사용

toHashCode() : 객체의 주소값을 사용해서 고유한 값을 생성한 값
서로 다른 객체는 절대로 같은 값을 가질 수 없으나, 해쉬코드를 재정의하면 로직에 따라 같은 해쉬코드를 가질 수도 있다.

같은 객체인지를 확인할 필요가 있을 때가 있고, 같은 값을 갖고 있는 객체인지 확인해야할 때가 있다.
같은 값을 갖고 싶을 때 equals메소드를 재정의해서 사용한다.
ex) String의 equals는 값을 비교하게 재정의 되어 있다.
두 객체를 비교할 때 해시코드가 다르면 equals를 실행도 안하고
		  해시코드가 같으면 equals를 실행해서 비교한다 



String클래스

int length()
boolean isEmpty()
boolean contains()
int indexOf(String str)
지정된 문자열이 처음으로 등장하는 위치를 반환
int lastIdxOf(String str)
지정된 문자열이 맨 마지막으로 등장하는 위치를 반환
String substring()

=================0414==================================
Wrapper 클래스
 - ArrayLists, LinkedList 등의 자료구조를 사용 시 Wrapper클래스만 사용이 가능
 - 객체는 기본데이터타입에 넣을 수 없으나, Wrapper클래스에는 넣을 수 있다.
 - Integer a =10;
   int b = a; -> 가능

오토박싱 : 자동으로 Wrapper클래스로 감싸줌
Integer[] scores = new Integer(100), new Integer(100), ...}
 ex)
for(Integer score : scores){
     total1 += score;	//Wrapper타입의 참조변수가 사칙연산자를 만나면 Wrapper객체에 저장된 
			값만 가져와서 사칙연산에 사용된다.
}

기본자료형 -> 문자열
정수 -> "문자열" : String.valueOf(정수)
	10 -> "10"  	String.valueOf(10) -> "10"
실수 -> "문자열" : String.valueOf(실수)
	3.14 -> "3.14"	String.valueOf(3.14) -> "3.14"
문자 -> "문자열" : String.valueOf(문자)
	'A' -> "A"	String.valueOf('A') -> "A"
불린 -> "문자열" : String.valueOf(불린)
	true -> "true"	String.valueOf(true) -> "true"


문자열을 기본자료형값으로 변환하기
"문자열" -> 정수
	Byte.parseByte(문자열)	-> byte값
	Short.parseShort(문자열) 	-> short값
	Integer.parseInt(문자열) 	-> int 값
	Long.parseLong(문자열) 	-> long값

"문자열" -> 실수
	Float.parseFloat(문자열)	-> float값
	Double.parseDouble(문자열) 	-> double값
"문자열" -> 문자

=> 웹에서는 전부 문자열로 받기 때문에 Wrapper.parseInt가 굉장히 많이 쓰인다.

웹의 대다수 정보들은 스트링과 함께 날짜정보가 포함되어 있다.
ex) 파일이름 등 저장할 때, 똑같은 경우를 방지하기 위해 유닉스타임을 덧붙여 저장하는데 사용된다.
=> System.currentTimeMillis(); : 유닉스타임을 바로 반환해줌

특정날짜를 구하고 싶을 때는 Calender를 씀 => 추상클래스라 new안됨
월의 시작은 0부터 시작, 4월 => 3, 1월 => 0


날짜 데이터 출력 포맷 적용 방식
SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy/mm/dd");
String value1 = sdf1.format(now);

십진수 출력 포맷 적용 방식
DecimalFormat df = new DecimalFormat("#,###");
String formattedNum = df.format(number);
     #.## => 소수점 표현 시 의미없는 0 생략 (3.1)
     0.00 => 소수점 표현 시 자릿수 맞춤       (3.10)


---------------------------------제네릭---------------------------------------
- 정의 : 소스 레벨에서 데이터 타입이 결정되지 않고, 별칭만 지정된다.
     - Book, Computer, Phone 객체를 모두 수용할 수 있는 Object타입의 멤버변수를 정의한다.
     - 제네릭에 들어갈 수 있는 타입을 제한해줌으로써 타입안정성을 제공한다.
     - Class<String> blahblah => String만 들어갈 수 있음
	* 타입파라미터는 보통 영어 대문자를 사용(T, E 등)
	* 타입파라미터는 1개 이상 지정가능
	* 객체 생성시 타입파라미터의 위치에 실제로 사용할 타입을 지정하면 생성된 객체는 해당 타입으로 
	   변경되어 있다.
- 사용 목적
     - 제네릭은 배열과 같이 다양한 타입의 객체를 담을 목적으로 
       만들어진 클래스, 메소드에 사용된다.
     - 자바에서는 콜렉션 클래스들이 전부 제네릭으로 구현되어 있다.
        (ArrayList<E>, HashSet<E>, TreeSet<E>, Stack<E>, Vector<E>, LinkedList<E>)
 
- 장점
     - 타입파라미터로 지정한 타입의 객체만 저장됨
     - 어떤 타입의 객체를 저장할 목적으로 생성했는지 바로 파악 가능(코드 가독성 증가)
     - 프로그램 실행 전, 컴파일 과정에서 타입오류가 체크된다.
     - 형변환의 번거로움이 사라짐


=================0415==================================
라이브러리 (사용자는 라이브러리를 능동적 활용)
 - 개발에 공통으로 사용될만한 유용한 기능을 모듈화하여 제공하는 것
vs
프레임워크 (사용자가 프레임워크에 수동적으로 포함)
 - 개발에 공통으로 사용될만한 유용한 기능을 모듈화하여 제공하는 것
 - 프로그래밍 방식을 정형화하여 개발 생산성과 유지보수성을 

list : 순서가 있는 데이터들의 집합(저장한 순서 그대로 꺼낼 수 있음)
set : 데이터의 중복을 허용하지 않음


Comparable<T> 인터페이스를 구현한 객체는 정렬 가능하다.
Collections.sort(리스트)

Comparator<T> 인터페이스를 익명 객체로 구현해서 sort메소드에 전달하면 아무 객체라도 정렬가능하다
Collections.sort(리스트, 익명객체)  => 리스트에 자손들만 올 수 있다, set류는 불가

인터페이스 중 추상메소드가 하나만 있는 경우는 전부 람다식으로 표현 가능하다.


=================0416==================================
Collection<E> 인터페이스
* 모든 자료구조 클래스가 반드시 포함해야할 기능이 설계되어 있는 인터페이스
* add(E e), contains(Object obj), isEmpty(), remove(Object obj), clear(), size()

List<E> 인터페이스
	* 순서가 유지되는 자료구조 클래스가 반드시 포함해야할 기능이 설계되어 있는 인터페이스
 	* add(int index, E e), get(int index), remove(int index), set(int index, E e)
	* 구현클래스
		ArrayList<E>, LinkedList<E>(큐로 구현), Vector<E>, Stack<E>
				

Set<E> 인터페이스
	* 중복저장이 허용되지 않는 자료구조 클래스가 반드시 포함해야할 기능이 설계되어 있는 인터페이스
	* Collection<E> 인터페이스의 추상메소드 상속
	* 구현클래스
		HashSet<E> ,  TreeSet<E>
		* TreeSet<E>은 Comparable<E>를 구현한 객체에 대해 오름차순 정렬되어 저장한다.
		=>TreeSet은 정렬하기 위해 사용
	** Tree형태는 값의 검색이 매우 빠르다

Map<K, V> 인터페이스
	* key, value의 쌍으로 데이터를 저장하는 자료구조, 클래스가 반드시 포함해야할 기능이 설계되어 있는 인터페이스
	* key는 중복을 허용하지 않는다.
	* Map.Entry<K, V> : Key와 Value 한 쌍
	* map.put("hong","홍길동")-> 객체 map에 key, value 저장하기
	* keySet() : Map객체의 모든 key값을 set 객체에 담아서 제공해줌

	* 구현클래스
		HashMap<K, V>, HashTable<K, V>, Properties
		* Properties는 Key와 value가 무조건 String인 Map의 구현클래스이다.

	* 주요 사용목적
		- 가변적이지 않은 데이터의 저장
		- 조건문 회피 목적
		

ex) 웹브라우져
다음    	-> 회원가입: 이름, 아이디, 비번, 메일, 주소
네이버  	-> 회원가입: 이름, 아이디, 비번, 메일, 주소, 네이버페이 연결계좌, 은행명
페이스북	-> 회원가입: 이름, 아이디, 비번, 메일
인스타	-> 회원가입: 이름, 아이디, 비번

회사에서 수집하는 정보가 각기 다르기 때문에 웹브라우져 개발자는 일일히 모든 VO를 만들 수 없다.
						=>map을 통해서 해결함


=================0419==================================
Properties클래스 => HashMap을 구현한 클래스

예외 : 코드의 수정으로 고칠 수 있는 것
에러 : 코드 외 운영체제의 오류 등 외부 요인으로 인한 오류

CheckedException vs UncheckedException

try {
   예외발생이 예상되는 수행문;
   예외발생이 예상되는 수행문;
   수행문;				예외가 상속관계일 경우
} catch(예외 클래스타입 변수명){	손자
} catch(예외 클래스타입 변수명){	아들
} catch(예외 클래스타입 변수명){	조상 순으로 예외처리를 해야한다. (구체적인 익셉션이 먼저 발생하게끔 하기위해)
}

catch블록에서는
- 발생한 예외정보를 로그로 기록
- 사용자에게 예외발생원인 안내
- 개발자에게 오류 수정을 위한 디버깅메시지 출력

예외 발생 시 
예외처리의 클래스명 확인 -> 보통 내가 작성한 마지막 부분의 클래스에 오류가 있음

파일 생성
FileWriter writer = new FileWriter("경로");
writer.write("파일생성");

=================0420==================================

 throws는 각 케이스별로 하는 것이 좋다. 모조리 조상클래스에 몰빵하지말고

// 해당 메소드에서 발생이 예상되는 모든 예외에 대한 예외처리
public void method1() throws FileNotFoundException, IOException, ParsedException, SQLException{
	예외발생 실행문 1; //FileNotFoundException
	예외발생 실행문 2	IOException
	예외발생 실행문 3ParsedException
	예외발생 실행문 4SQLException
}

// 상속관계의 예외 중 부모타입의 예외로 한번에 묶어서 예외처리를 위임할 수 있다.
public void method1() throws IOException, ParsedException,SQLException{
	예외발생 실행문 1; //FileNotFoundException
	예외발생 실행문 2	IOException
	예외발생 실행문 3ParsedException
	예외발생 실행문 4SQLException
}

// 최상위 부모예외로 위임하면 메소드에서 발생하는 모든 예외처리를 위임할 수 있다.
public void method1() throws Exception{
	예외발생 실행문 1 //FileNotFoundException
	예외발생 실행문 2	IOException
	예외발생 실행문 3 ParsedException
	예외발생 실행문 4 SQLException
}

예외클래스를 만들 때는 생성자 안에 반드시 super()를 선언해주어야 한다.
=> throwable 클래스에 메시지가 들어있기 때문에.

--예외처리의 나쁜 예 ->3번

public class 예외처리예제{
	//1. 메소드의 수행문에서 발생하는 예외를 처리하지 않고, 예외 떠넘기기	
		=>예외처리 여부를 확인할 수 있다.
	public void test1() throws 예외{
		예외 발생이 예상되는 메소드 실행;
	}
	
	//2. 메소드의 수행문에서 발생하는 예외를 가로채고, 대신 다른 예외를 발생시켜서 떠넘기기 	
		=>예외처리 여부를 확인할 수 있다.
	public void test2(){
		try{
			예외 발생이 예상되는 메소드 실행;
		} catch(예외1 e) {
			throw new 예외2(메세지,  e);
		}
	}
	
	//3. 메소드의 수행문에서 발생하는 예외를 가로채고, 에러메세지와 관련 메소드를 출력하기 
		=>예외처리 여부를 확인할 수 없다	=> 개발자의 눈에는 보이나, 코드상으로 체크가 되지 않는다.
	public void test3() {
		try{
			예외 발생이 예상되는 메소드 실행;
		}catch(예외 e){
			sysout("에러 메세지: " + e.getMessage());
			e.printStackTrace();
		}
	}
}

JDBC: 오라클이 지정해 놓은 DB의 표준(인터페이스)



=================0421==================================
----Exception

자원을 점유하는 수행문의 경우 예외 발생 시 바로 catch로 넘어가기 때문에 사용중인 자원을 해제하는 수행문을 
수행할 수 없다.
-> finally : 예외발생과 상관없이 항상 실행됨/ 주로 프로그램이 점유했던 컴퓨터의 자원을 해제하는 수행문이 포함됨



----파일입출력
stream : 읽기스트림 & 쓰기스트림
스트림은 한번에 하나씩만 이동함

스트림을 나누는 기준
- 입출력 방향
	입력스트림
		읽기 전용스트림
		InputStream
			int read()
			int read(byte[] buf)
		Reader
			char read()
			int read(char[] buf)
	출력스트림
		쓰기 전용스트림
		OutputStream
			void write(int value)
			void write(byte[] values, int offset, int length)
 		Writer
			void write(char value)
			void write(String value

- 입출력 데이터의 종류
	ㅇ 바이트 스트림
		1byte씩 읽고 쓰는 스트림
		InputStream, OutputStream
		텍스트, 사진, 영상, 압축파일 등 다양한 데이터의 읽기쓰기가 가능
	
	ㅇ 문자 스트림
		1글자씩 읽고 쓰는 스트림
		Reader, Writer
		오직 텍스트 데이터의 읽기 쓰기만 가능

	ㅇ 보조 스트림 
		다른스트림과 연결해서 사용하는 스트림 (입출력을 직접 처리하지는 못한다)
		스트림의 성능을 향상시키거나 새로운 기능을 추가하는 스트림
		직접 입출력작업을 처리하지 못하기 때문에 반드시 다른 스트림과 연결해서 사용한다.
		보조스트림은 생성자를 보면 구분할 수 있다. 
			xxxInputStream(InputStream in)
			xxxOutputStream(OutputStream out)
			xxxReader(Reader reader)
			xxxWriter(Writer writer)
			* 모든 보조스트림 클래스의 생성자는 다른 스트림을 매개변수로 전달받는다.
			(ex. BufferedInputStream(InputStream in, int size)


=> 스트림을 사용하는 대표적인 작업
	1. 첨부파일 업로드
		웹브라우저 -> 자바프로그램 -> 저장
		       InputStream	      OutputStream
	2. 사이트에서 파일 다운로드
		웹브라우즈 <- 자바프로그램 <- 파일
		       OutputStream      InputStream
	3. 텍스트 파일 읽기
		파일 -> 자바프로그램
		   Reader
	4. 텍스트 파일 쓰기
		파일 <- 자바프로그램
		   Writer


//프로그램에서 다루는 txt파일 (정해져있다)
	

	ㅇCSV 텍스트
		김유신,100,100,100
		강감찬,80,80,80
		*Reader, Writer를 쓴다
		* 읽기 : BufferedReader - 한 라인씩 읽는 기능 제공 
		* 쓰기 : PrintWriter	- 줄바꿈문자 자동추가 기능 제공

	
	ㅇXML 텍스트
		<?xml version="1.0" encoding="utf-8"?>
		<students>
			<student>
				<name>김유신</name>
				<kor>100</kor>
				<eng>100</eng>
				<math>100</math>
			</student>
			<student>
				<name>김유신</name>
				<kor>100</kor>
				<eng>100</eng>
				<math>100</math>
			</student>
		</students>
		* XML 텍스트 데이터를 다루는 별도의 라이브러리가 있다. =>reader,writer보다 많이씀

	ㅇJSON 텍스트
		[{"name":"김유신", "kor":100,"eng":100,"math":100},
		 {"name":"강감찬", "kor":80,"eng":70,"math":80}]
		* JSON 텍스트 데이터를 다루는 별도의 라이브러리가 있다. =>reader,writer보다 많이씀	

	-> 텍스트 데이터를 다룬다는 것은 기사, 글 등등 문장을 다루는 것이 아니다


=================0422==================================
----버퍼(buffer, 임시 저장소)
 ->버퍼의 특징 : 버퍼가 꽉 차야 데이터를 옮긴다.
    (데이터의 마지막 부분에서 데이터가 남을 수 있음, (ex)10개 차야 가는데 마지막에 8개가 남아있는 경우)
    flush()로 해결
	-> buffer에 들어있는 내용을 강제로 출력시킨다. 
	-> close()로도 출력할 순 있으나, 계속해서 접속이 유지되어야 하는 경우 flush()를 사용한다
	printWriter.println()은 autoflush 기능이 있어서 flush 안해줘도 된다.


모든 InputStream, 모든 OutputStream은 버퍼기능이 없다.
모든 Writer는 버퍼기능이 있다.
스트림클래스 이름에 Buffered가 붙어 있으면 버퍼기능이 있다.
 (아래는 버퍼기능을 추가해주는 보조스트림)
 BufferedInpuStream, BufferedOutputStream
 BufferedReader, BufferedWriter
BufferedInputStream과 연결된 모든 InputStream은 버퍼기능이 추가된다.
BufferedOutputStream과 연결된 모든 OutputStream은 버퍼기능이 추가된다.
=> 스트림 개별에 버퍼를 구현한게 아니다.


바이트 스트림
	InputStream, OutputStream
	다양한 컨텐츠(텍스트, 그림, 영상, 기타)의 읽고 쓰기
	*목적
		컨텐츠를 읽어서 다른 곳으로 출력하기
		첨부파일 업로드/다운로드, 파일복사, 백업본 생성, 파일주고받기

캐릭터 스트림
	Reader, Writer	
	텍스트의 읽고 쓰기
	* 목적 
		텍스트 데이터를 읽어서 분석하기
		프로그램 실행결과를 텍스트로 출력하기

=> 텍스트 자체를 받아와서 사용해야할 때 reader,writer를 쓰고
	그 외 의 경우는 InpuStream과 OutputStream을 써라






=================0423==================================
브릿지스트림

바이트스트림과 문자스트림을 연결하는 스트림
InputStreamReader
	InputStream과 Reader를 연결하는 스트림
	사용예)
		FileInputStream inputStream = new FileInputStream("a.txt")
		InputStreamReader isr = new InputStreamReader(inputStream);
		BufferedReader reader = new BufferedReader(isr);
		* FileInputStream과 BufferedReader를 연결하였음

		URL url = new URL("http://www.abc.net/코로나현황.csv");

		InputStream is = url.openStream();
		InputStreamReader isr = new InputStreamReader(is);

		BufferedReader reader = new BufferedReader(isr);
		* URL 객체가 제공하는 InputStream과 BufferedReader를 연결하였음

		Socket socket = new Socket("채팅서버주소", 3000);
		InputStream is = socket.getInputStream();
		InputStreamReader isr = new InputStreamReader(is);
		BufferedReader reader = new BufferedReader(isr);
		* 채팅서버와 연결된 Socket객체가 제공하는 InputStream과 BufferedReader를 연결

	OutputStreamWriter
		OutputStream과 Writer를 연결하는 스트림
		사용예)
			FileOutputStream outputStream = new FileOutputStream("a.txt");
			OutputStreamWriter osw = new OutputStreamWriter(outputStream);
			FileWriter writer = new FileWriter(osw);
	
			Socket socket = new Socket("채팅서버주소", 3000(;
			OutputStream os = socket.getOutputStream();
			OutputStreamWriter osr = new OutputStreamWriter(os);
			PrintWriter writer = new PrintWriter(osr);
			* 채팅서버와 연결된 Socket객체가 제공한 OutputStream과 Printwriter를 연결
		

*하나의 장치에 복수의 스트림을 연결해서 사용하면 출력이 섞여나올 수 있다.
-> 예외처리 도중 출력문 나오는 경우 등이 있다.


----Stream 정리
InputStream
	FileInputStream
		직접 파일에서 1byte씩 읽어오는 스트림
	BufferedInputStream
		모든 InputStream과 연결해서 사용하는 보조스트림, InputStream의 읽기 속도를 향상시킨다

OutputStream
	FileOutputStream
		직접 파일에 1byte씩 출력하는 스트림
	BufferedOutputStream
		모든 OutputStream과 연결해서 사용하는 보조스트림, OutputStream의 출력속도를 향상시킨다.
	PrintStream
		시스템의 표준출력 스트림으로 사용되는 스트림, System.out과 System.err 정적변수에 각각 연결되어 있다.
		print(), println()이 중복정의되어 있다.

Reader
	FileReader
		직접 파일에서 1글자씩 읽어오는 스트림
	BufferedReader
		모든 Reader와 연결해서 사용하는 보조스트림, 텍스트를 1줄씩 읽어오는 readLine() 메소드가 있다.
	InputStreamReader	
		브릿지스트림, InputStream과 연결할 수 있는 보조스트림

Writer
	FileWriter
		직접 파일에 1글자씩 읽어오는 스트림
	PrintWriter
		텍스트 출력의 만능 스트림
		print(), println()이 중복정의되어 있다. 자동으로 줄바꿈 문자 추가, auto-flush 기능 제공
		new PrintWriter("경로/파일명")
		new PrintWriter(다른 InputStream);
	OutputStreamWriter
		브릿지스트림, OutputStream과 연결할 수 있는 보조스트림




