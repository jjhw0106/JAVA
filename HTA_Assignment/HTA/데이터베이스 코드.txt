======================SQL 코드==================================
=====================0426 SQL 코드============================== 

--테이블의 모든 행, 모든 컬럼 조회하기
--SELECT * FROM DEPARTMENTS;

SELECT * FROM JOBS;
select employee_id,manager_id ,first_name
from employees;


--조회결과에 중복된 값이 있을 때 중복된 행을 제거하고 조회하기
-- enokyees 에 등록된 사원들이 종사하는 직종의 아이디를 조회하기
select distinct job_id  --distinct뒤에 선언된 attribute가 모두 똑같은 값을 중복없이선택
from employees;

--jobs_history 테이블을 조회해서 직종이 변경된 적이 있는 사원의 아이디를 조회하기
select distinct employee_id
from job_history;

-- 연결 연산자를 이용해서 두 개 이상의 컬럼값을 붙여서 조회하기
-- 오라클에서는 문자열 홑따옴표로 입력
select employee_id, first_name, last_name, first_name||' '|| last_name
from employees;

-- 조회 결과에 별칭 붙여 조회하기
select employee_id, first_name || ' ' || last_name as full_name
from employees;

--as 생략 가능, 쌍따옴표로 띄어쓰기 쓸 수는 있으나 절대 사용 안함
select employee_id, first_name || ' ' || last_name "full name"
from employees;

select employee_id id, first_name || ' ' || last_name name
from employees;

-- 사칙연산자 사용하기
-- employees 테이블에서 사원아이디, 이름, 주급, 월급 조회하기
select employee_id, first_name, salary, salary*4 as salary_of_month
from employees;

-- jobs 테이블에서 직종아이디, 최소급여, 최대급여, 최소급여와 최대급여의 차이를 조회하기
select job_id, min_salary, max_salary, max_salary-min_salary as salary_gap
from jobs;

select employee_id, first_name
from employees
where employee_id = 100;

--이름이 steven인 사원의 사원아이디, 이름, 직종아이디, 급여 조회
select employee_id,first_name, job_id, salary
from employees
where first_name = 'Steven';    --값은 대소문자가 다르면 안된다.

--급여가 3000이하인 사원의 사원아이디, 이름, 직종아이디, 급여를 조회하기
select employee_id, first_name, job_id, salary
from employees
where salary<=2500;

--조회결과를 이름에 대한 오름차순으로 정렬하기
select first_name, salary
from employees
where salary >= 10000
order by salary asc;


--급여 내림차순으로 정렬하되,
--급여가 동일한 경우 이름순으로 오름차순 정렬하기
select first_name, salary
from employees
where salary >= 10000
order by salary desc, first_name asc;  --,순으로 조건 적용


==
select employee_id, first_name, salary
from employees
where manager_id in (101, 102); --or는 잘 쓰지 않는다.
    
select* 
from employees
where salary <1000 or salary >10000; -- 이런식으로 찾을 값은 별로 존재 x

--소속부서 아이디가 30번이거나 60번이면서 급여를 5000이상 받는 사원의 아이디
--이름, 급여, 소속부서 아이디를 조회하기

select employee_id, first_name, salary, department_id
from employees
where department_id in ( 30, 60) 
and salary>=5000;



============0427

select employee_id, first_name, salary
from employees
where manager_id in (101, 102); --or.
    
select* 
from employees
where salary <1000 or salary >10000; -- 이런식으로 찾을 값은 별로 존재 x

--소속부서 아이디가 30번이거나 60번이면서 급여를 5000이상 받는 사원의 아이디
--이름, 급여, 소속부서 아이디를 조회하기

select employee_id, first_name, salary, department_id
from employees
where department_id in ( 30, 60) 
and salary>=5000;

--or와 and를 괄호 없이 적었을 경우
select employee_id, first_name, salary, department_id
from employees
where department_id = 30 or department_id = 60 
and salary>=5000;


-- is null, is not null을 이용해서 컬럼의 값이 null인 것과 null이 아닌 것을 구분해서 조회하기
select department_id, department_name, manager_id 
from departments
where manager_id is null; -- where manager_id = null ->null은 값 자체가 없기 때문에 이런 연산이 불가하다.

--employees테이블에 등록된 사원들 중에서 커미션을 받는 사원의 아이디, 이름, 급여,커미션 조회하기
select employee_id, first_name, salary, commission_pct
from employees
where commission_pct is not null;
        
        
--employees테이블에 등록된 사원들 중에서 커미션을 받으며
--급여가 10000이상인 사원의 아이디, 이름, 급여,커미션 조회하기
select employee_id, first_name, salary, commission_pct
from employees
where commission_pct is not null
and salary>=10000;


-- 커미션 오름차순으로 정렬
select employee_id, first_name, salary, commission_pct
from employees 
where commission_pct is not null
and salary>=10000
order by commission_pct asc;


-- employee테이블에서 사원번호가 110번이상 120번 이하인 사원의 사원아이디, 이름 조회
select employee_id, first_name
from employees
where employee_id between 110 and 120; --경계값 포함

-- employees 테이블에서 직종 아이디에 clerk를 포함하고 있는 사원의 아이디, 이름, 직종아이디 조회
select employee_id, first_name, job_id
from employees
where job_id like '%CLERK'; --문자열은 대소문자 맞출것

--Employees 테이블에서 대문자 'S'를 이름에 포함하고 있는 모든 사원의 이름을 조회하기
select first_name
from employees
where first_name like '%S%';

--employees 테이블에 등록된 사원들 중에서 소속부서 아이디가 30, 50, 60, 80 이 아닌 사원의 
--아이디, 이름, 부서아이디를 조회하기
select employee_id, first_name, department_id
from employees
where department_id not in (30,50,60,80)
order by department_id asc;


=========================0428=============================
select
trunc(1234.56789, 4),   --소수점 4자리까지
trunc(1234.56789, 2),   --소수점 2자리까지
trunc(1234.56789, -1),
trunc(1234.56789, -3),
trunc(1234.56789, -6)
from dual;

select sysdate from dual; --현재날짜, 시간정보 반환

select MONTHS_BETWEEN(SYSDATE,hire_date) from employees;

select employee_id, first_name, hire_date, trunc(MONTHS_between(Sysdate,hire_date),0)
from employees;

--날짜연산
-- date + 숫자 -> 날짜: date에서 숫자만큼 경과된 날짜
-- date - 숫자 -> 이전 날짜
-- date = date -> 두 날짜 간의 day 
select sysdate +5, sysdate-5 from dual;

select trunc(sysdate - date '2021-04-27',0) from dual;

select sysdate, next_day(sysdate,'월') --그 다음 주의 해당 요일

--last_day (날짜) : 
from dual;

--묵시적 형변환
select employee_id, salary
from employees
where salary>=15000;

select employee_id, salary
from employees
where salary>='15000';  -->숫자로 자동 형변환

select employee_id, first_name, hire_date
from employees
where hire_date>'2007,01,01';  -->날짜로 자동 형변환

select employee_id, first_name, salary, to_char(salary, '999,999')
from employees;

select employee_id, first_name, salary, to_char(salary, '000,000')
from employees;


select employee_id, first_name, salary, to_char(salary, '999,999'), commission_pct, to_char(commission_pct, '0.99')
from employees
where commission_pct is not null;

--날짜 -> 형식화된 문자열
select employee_id, first_name, hire_date,
            to_char(hire_date, 'yyyy'),
            to_char(hire_date,'mm'),
            to_char(hire_date,'dd'),
            to_char(hire_date,'yyyy/mm/dd'),
            to_char(hire_date,'yyyy"년 "mm"월" dd"일" day'),
            to_char(hire_date,'hh:mi:ss'),
            to_char(hire_date,'hh"시" mi"분" ss"초"')
from employees;

--문자 -> 숫자
select ' 100' + '100' from dual;    --묵시적 형변환
select to_number('1,000','9,999') + to_number('1,000', '9,999') from dual; -- 명시적 형변환

--문자 -> 날짜
select sysdate - to_date('2020/12/25', 'yyyy/mm/dd') from dual;

--nvl 함수
-- nvl(null값이 예상되는 컬럼 혹은 표현식, 대체할 값)
select nvl(1000, 0),
            nvl(null, 0)
from dual;

--널과 사칙연산을 하면 null이된다.
select 100+null, 100-null, 100*null
from dual;

--employees 테이블에서 사원아이디, 이름, 급여, 커미션이 적용된 급여를 조회하기
select employee_id, first_name, salary, salary+salary*nvl(commission_pct, 0)    --format에는 commission과 같은 타입이 들어가야함
from employees;

--decode
select employee_id, first_name, department_id, salary,
        decode(department_id, 30, salary*0.2) bonus
from employees
where department_id in (10,20,30);
S
--employees 테이블에서 직종아이디에 Clerk가 포함되어 있는 일반 사원들인 경우
--전체 평균급여의 50%를 보너스로 지급하고 그외는 전체 평균급여의 30%를 보너스로 지급할 예정
--사원아이디, 이름, 직종, 보너스 출력하기
select employee_id, first_name, job_id, 
        decode(substr(job_id, 4),'CLERK', (select trunc(avg(salary)/2) from employees),
                                          (select trunc(avg(salary)*0.3) from employees)) bonus
from employees;

select trunc(avg(salary)/2)
from employees;

-- case문
-- if문과 같은 역할을 수행한다.
-- decode는 equal 비교만 가능한데 비해서, case문은 >, >=, <. <= 등의 비교도 가능하다
-- case
--      when 조건식1 then 표현식1
--      when 조건식2 then 표현식2
--      when 조건식3 then 표현식3
--                  else 표현식4      
-- end

-- employees 테이블에서 급여를 20000달러 이상 받는 경우 급여의 10%를 보너스로 지급하고,
--                          10000달러 이상 받는 경우 급여의 30%를 보너스로 지급하고,
--                           5000달러 이상 받는 경우 급여의 50%를 보너스로 지급하고,
--                                           그 외 급여의 75%를 보너스로 지급한다.

select employee_id, first_name, salary,

round(
    case 
        when salary>=20000 then salary*0.1 
        when salary>=10000 then salary*0.3 
        when salary>= 5000 then salary*0.5 
                       else  salary*0.75 
    end,-2) as bonus
from employees;

--employees 테이블에 저장된 사원들의 급여를 기준으로 등급을 조회하려고 한다.
--급여가 20000이상인 경우 A, 10000이상인 경우 B, 5000이상인 경우 C,
--      2500이상인 경우 D, 그 외는 E 등급으로 판정한다.
-- 사원아이디, 이름, 급여, 급여등급을 조회하기

select employee_id, first_name, salary, 
    case
        when salary>=20000 then 'A'
        when salary>=10000 then 'B'
        when salary>= 5000 then 'C'
        when salary>= 2500 then 'D'
                           else 'E'
    end salary_grade
from employees;

=========0428 퀴즈 ==============================
--employees 테이블에서 관리자(상사)의 사원아이디를 중복없이 조회하기
select distinct manager_id
from employees;

--employees 테이블에 등록된 사원들이 소속된 부서아이디를 중복없이 조회하기
--(소속부서 없으면 사원 제외
select distinct (department_id)
from employees
where department_id is not null;

--employees 테이블에서 사원아이디, 이름, 메일 조회하기(이메일 소문자)
select employee_id, first_name, lower(email)
from employees;


--employees 테이블에서 이름이 A로 시작하는 사원의 아이디, 이름 조회
select employee_id, first_name 
from employees
where first_name like 'A%' ;

-- employees 테이블에서 모든 사원들의 아이디, 이름, 급여, 연간 총 수입을 조회하기
-- 연간 총수입은 급여*12 + (급여*12*commission_pct)다.
select employee_id, first_name, salary, salary*12+nvl(commission_pct,0) 연간총수입
from employees;


-- employees 테이블에서 80번 부서에서 근무중인 사원들의 사원아이디, 이름, 급여, 세금을 조회하기
-- 14000이상 45%, 10000이상 42%, 7500이상 35%, 5000이상 25%, 2000이상 9%, 그외는 0%다.
select employee_id, first_name, salary, 
    case 
        when salary>=14000 then salary*0.45
        when salary>=10000 then salary*0.42
        when salary>=7500  then salary*0.35
        when salary>=5000  then salary*0.25
        when salary>=2000  then salary*0.09
                           else 0
    end tax
from employees;


-- employees 테이블에서 50번 부서에서 근무중이 사원들의 급여를 15% 인상했을 때,
-- 사원아이디, 이름, 인상전 급여, 인상된 급여, 인상된 급여와 인상전 급여의 차이를 조회하기
select department_id,employee_id, first_name, salary, 
        decode(department_id, 50, salary*1.15) increasedSalary,
        decode(department_id, 50, salary*1.15)-salary 차이
from employees
where department_id = 50;


-- employees 테이블에서 사원의 이름이 'A', 'J' 또는 'M'으로 시작하는 사원의 아이디, 이름을 조회하기
select employee_id, first_name 
from employees
where (first_name like 'A%' or first_name like 'J%' or first_name like 'M%');

-- employees 테이블에서 근무를 시작한 날로부터 오늘까지 근무한 개월수를 계산해서 조회하기
-- 사원아이디, 이름, 입사일, 근무한 개월수(개월수는 정수로 반올림한다.)만 조회한다.
select employee_id, first_name, hire_date, round(months_between(sysdate, hire_date)) 근무월
from employees;


-- employees 테이블에서 사원들의 급여를 *의 갯수로 표시하려고 한다.
-- *하나가 1000달러를 나타낸다고 했을 때, 사원의 아이디, 이름, 급여, *을 표시하기
-- 100 홍길동 3400  ***
-- 101 김유신 15000 ***************
-- 102 강감찬 7300  *******

select employee_id, first_name,salary,lpad('*',(salary/1000),'*')
from employees;


=========================0429===========================

--100번 사원의 이름, 전번, 이메일
-- 소속 부서아이디, 소속부서명, 소속부서 도시명, 소속부서 소재지 주소 조회하기
select *
from employees e, departments d , locations l
where e.employee_id = 100
and e.department_id = d.department_id  
and d.location_id = l.location_id;

--50번 부서에 소속된 사원들으 ㅣ사원아이디, 이름, 직종아이디, 직종제목 조회하기

select e.employee_id, e.first_name, e.job_id, j.job_title
from employees e, departments d, jobs j
where e.department_id = 50
and e.department_id = d.department_id
and e.job_id = j.job_id
order by employee_id asc;

-- 급여를 15000이상 받은 사원들의 이름, 직종아이디, 급여, 부서명 조회하기
select e.first_name, e.job_id, e.salary, d.department_name
from employees e, departments d
where e.salary >= 15000
and e.department_id= d.department_id;

-- 100번 직원이 관리하는 사원들의 이름, 직종아이디, 직종제목, 부서아이디, 부서명 조회하기
select e.first_name, e.job_id, j.job_title, d.department_id, d.department_name
from employees e , departments d, jobs j
where e.manager_id = 100 
and e.department_id = d.department_id
and e.job_id = j.job_id;

-- 모든 사원들의 사원아이디, 이름, 소속부서아이디, 소속부서명을 조회하기
select e.employee_id, e.first_name, e.department_id, d.department_name
from employees e, departments d
where e.department_id=d.department_id;
-- 모든 사원들의 사원아이디, 이름, 직종아이디, 직종제목을 조회하기
select e.employee_id, e.first_name, e.job_id, j.job_title
from employees e, jobs j
where e.job_id= j.job_id;
-- 사원들 중에서 소속부서가 정해지지 않는 사원의 아이디, 이름, 급여, 직종, 직종최소급여, 직종최대급여를 조회하기
select e.employee_id, e.first_name, e.salary, j.job_title, j.min_salary, j.max_salary
from employees e, jobs j
where e.department_id is null
and e.job_id = j.job_id;

-- 2007년에 입사한 사원들의 사원아이디, 이름, 소속부서아이디, 소속부서명을 조회하기
select e.employee_id, e.first_name, e.department_id, d.department_name
from employees e , departments d
where e.department_id = d.department_id
and to_char(e.hire_date,'yyyy') = '2007';

-- 커미션을 받은 사원들의 사원아이디, 이름, 직종, 직종제목, 소속부서아이디, 소속부서명을 조회하기
select e.employee_id, e.first_name, e.job_id, j.job_title, d.department_id, d.department_name
from employees e, departments d, jobs j
where e.commission_pct is not null
and e.department_id = d.department_id
and e.job_id = j.job_id;


-- 직종최소급여가 10000달러 이상인 직종에 종사하고 있는 사원들의 아이디, 이름, 직종아이디, 급여를 조회하기
select e.employee_id, e.first_name, e.salary, e.job_id
from employees e,  jobs j
where j.min_salary >= 10000 
and e.job_id = j.job_id;

-- 모든 사원들의 사원아이디, 이름, 소속부서아이디, 소속부서명, 해당부서의 소재지 도시 및 주소를 조회하기
select e.employee_id, e.first_name, d.department_name, l.city, l.street_address
from employees e, departments d, locations l
where e.department_id = d.department_id
and d.location_id = l.location_id;

-- 모든 사원들의 사원아이디, 이름, 직종아이디, 직종제목, 소속부서아이디, 소속부서명, 해당부서의 소재지 도시 및 주소
select e.employee_id, e.first_name, e.job_id, j.job_title,d.department_id,d.department_name,l.city, l.street_address
from employees e, departments d,jobs j, locations l
where e.department_id = d.department_id
and d.location_id = l.location_id
and e.job_id = j.job_id;

-- 부서 소재지 국가가 미국에 위치하고 있는 부서의 부서아이디, 부서명, 도시명을 조회하기
select d.department_id,d.department_name,l.city
from  departments d, locations l
where l.country_id = 'US'
and d.location_id = l.location_id;

-- 'Seattle'에서 근무하고 있는 사원들의 사원아이디, 이름, 부서아이디, 부서명을 조회하기
select e.employee_id, e.first_name, e.department_id, d.department_name
from employees e, departments d, locations l
where l.city = 'Seattle'
and d.location_id = l.location_id
and e.department_id = d.department_id;

-- 2006년에 job이 변경된 기록이 있는 사원들의 사원아이디, 이름, 직종아이디를 조회하기
select distinct e.employee_id, e.first_name, e.job_id
from employees e, job_history jh
where to_char(jh.start_date,'yyyy')='2006'
and e.employee_id = jh.employee_id;

-- 이전에 50번 부서에서 근무한 적이 있는 사원들의 사원아이디, 이름, 근무시작일, 근무종료일, 근무당시 직종아이디를 조회하기
select e.employee_id, e.first_name, jh.start_date, jh.end_date, jh.job_id
from employees e, job_history jh
where jh.department_id = 50
and e.employee_id = jh.employee_id;

-- 사원들 중에서 자신이 근무하고 있는 직종의 최소급여와 최대급여의 평균값보다 적은 급여를 받는 
-- 사원의 아이ㅏ디, 이름, 직종아이디, 급여, 최소급여, 최대급여, 최소/최대급여 평균값 조회
select e.employee_id, e.first_name, e.job_id, e.salary, j.min_salary, j.max_salary, (j.min_salary+j.max_salary)/2 average
from employees e, jobs j, departments d
where e.salary<(j.min_salary+j.max_salary)/2
and e.department_id = d.department_id
and e.job_id = j.job_id;


==============0430==================================
-- 비등가조인
-- 모든 사원들의 아이디, 이름, 급여 급여등급을 조회하기
-- 아이디, 이름, 급여 - EMPLOYEES
-- 급여등급 - SALARY_GRADE
-- 사원의 급여가 급여등급정보의 최소급여 이상이고, 최대급여 이하인 행과 조인

SELECT *
FROM EMPLOYEES E, SALARY_GRADE S
WHERE E.SALARY >= S.MIN_SALARY AND E.SALARY <=S.MAX_SALARY
ORDER BY E.EMPLOYEE_ID;

-- 자체조인(SELF JOIN)
select 상사.employee_id, 상사.first_name 
from employees 부하, employees 상사
where 부하.employee_id= 101
and 부하.manager_id = 상사.employee_id;


--60번 부서에 소속된 사원들의 사원아이디, 사원이름, 상사의 아이디, 상사의 이름 조회하가ㅣ
select a.employee_id, a.first_name, b.employee_id, b.first_name 
from employees a, employees b
where a.department_id = 60
and a.manager_id = b.employee_id;

-- 60번 부서에 소속된 사원들의 사원아이디, 사원이름, 사원의 소속부서명, 상사의 아이디, 상사의 이름, 상사의 소속부서명 조회하기
select a.employee_id,a.first_name, a.department_id, d1.department_name,
       b.employee_id 상사아이디, b.first_name 상사이름, b.department_id 상사부서 , d2.department_name
from employees a, employees b, departments d1, departments d2
where a.department_id = 60
and a.department_id = d1.department_id
and b.department_id = d2.department_id
and a.manager_id = b.employee_id;
