==========================0507=======================================

-- 서브쿼리

------------------------- 단일행 서브 쿼리 -------------------------------------------------
-- 전체사원의 평균급여보다 급여를 적게 받는 사원들의 아이디, 이름, 급여를 조회하기
select employee_id, first_name, salary
from EMPLOYEES 
where salary < (select avg(salary)
                from employees);
                
-- 100번 사원과 같은 부서에서 근무하는 사원들의 사원아이디, 이름을 조회하기
-- 1. 100번 사원이 소속되어 있는 부서아이디
select department_id
from employees 
where employee_id = 100;

-- 2. 90번 부서에서 근무하고 있는 사원들의 사원아이디, 이름 조회하기
select employee_id, first_name
from employees 
where department_id = 90;

-- 3. 100번 사원과 같은 부서에서 근무하는 사원들의 사원아이디, 이름을 조회하기
select employee_id, first_name
from employees 
where department_id = (select department_id
                       from employees 
                       where employee_id = 100);


-------------------------- 다중행 서브쿼리 --------------------------------------------------                                               
-- 부서별 평균급여를 조회했을 때 평균급여가 5000달러 이하 부서에 근무중인 사원들 조회하기
-- 1. 부서별 평균급여를 조회했을 때 평균급여가 5000달러 이하인 부서
select department_id -- 10, 30, 50부서가 평균급여가 5000 달러 이하인 부서
from employees 
where department_id is not null 
group by department_id
having avg(salary) <= 5000;
-- 2. 5000달러 이하 부서에 근무중인 사원들 조회하기
select employee_id, first_name, department_id
from employees 
where department_id in (10, 30, 50);
-- 3. 부서별 평균급여를 조회했을 때 평균급여가 5000달러 이하 부서에 근무중인 사원들 조회하기
select employee_id, first_name, department_id
from employees 
where department_id in (select department_id
                        from employees 
                        where department_id is not null 
                        group by department_id
                        having avg(salary) <= 5000);
                        
-- 직종최소급여가 10000달러 이상인 직종에 종사중인 사원들이 아이디, 이름, 직종아이디를 조회하기
-- 1. 직종최소급여가 10000달러 이상인 직종
select job_id -- AD_PRES, AD_VP, SA_MAN
from jobs 
where min_salary >= 10000;
--2. 직종최소급여가 10000달러 이상인 직종에 종사중인 사원
select employee_id, first_name, job_id, salary
from employees 
where job_id in ('AD_PRES', 'AD_VP', 'SA_MAN');
-- 3. 직종최소급여가 10000달러 이상인 직종에 종사중인 사원들이 아이디, 이름, 직종아이디를 조회하기
select employee_id, first_name, job_id, salary
from employees 
where job_id in (select job_id 
                 from jobs 
                 where min_salary >= 10000);
                 
-- 서브쿼리로 해결되는 문제를 조인으로 해결하기
select E.employee_id, E.first_name, E.job_id, E.salary
from jobs J, employees E 
where J.min_salary >= 10000 
and J.job_id = E.job_id;

-- 50번 부서에 소속된 사원중에서 60번 부서에 소속된 직원의 급여보다 급여를 많이 받는 
-- 사원의 아이디, 이름, 급여를 조회하기
-- 1. 60번부서에 소속된 사원들의 급여 조회
select salary -- 9000, 6000, 4800, 4200
from employees 
where department_id = 60;
-- 2. 60번 부서에 소속된 직원의 모든 급여보다 급여를 많이 받는 50번 부서의 사원 조회
select employee_id, first_name, salary
from employees 
where department_id = 50 
and salary >all (9000, 6000, 4800, 4200); -- and salary > 9000
-- 2. 60번 부서에 소속된 직원의 급여 중 아무꺼나 하나보다 급여를 많이 받는 50번 부서의 사원 조회
select employee_id, first_name, salary
from employees 
where department_id = 50 
and salary >any (9000, 6000, 4800, 4200); -- and alary > 4200
-- 3. 50번 부서에 소속된 사원중에서 60번 부서에 소속된 직원의 급여보다 급여를 많이 받는 
-- 사원의 아이디, 이름, 급여를 조회하기
select employee_id, first_name, salary 
from employees 
where department_id = 50
and salary >all (select salary
                 from employees 
                 where department_id = 60);
-- ">all"은 "> max()"로 대체할 수 있다.
select employee_id, first_name, salary 
from employees 
where department_id = 50
and salary > (select max(salary)
              from employees 
              where department_id = 60);
         
------------------------------- 다중열 서브쿼리 -------------------------------------------     
-- 부서별 최고 급여를 받는 사원의 아이디, 이름, 급여, 부서아이디를 조회하기
-- 1. 부서별 최고급여를 조회하기
select department_id, max(salary) 
from employees 
where department_id is not null 
group by department_id;
-- 2. 부서별 최고 급여를 받는 사원을 조회하기
select employee_id, first_name, salary, department_id
from employees 
where (department_id, salary) in (select department_id, max(salary) 
                                  from employees 
                                  where department_id is not null 
                                  group by department_id);
                                  
                            
-------------------------- having절 서브쿼리 ------------------------------------------------
-- 부서별 사원수를 조회했을 때 가장 인원수가 많은 부서의 아이디와 인원수를 조회하기
-- 1. 부서별 사원수를 조회하기
select department_id, count(*) 
from employees 
where department_id is not null 
group by department_id;
-- 2. 가장 많은 인원수 조회하기
select max(count(*)) -- 45
from employees 
where department_id is not null 
group by department_id;
-- 3. 가장 많은 인원수를 보유하고 있는 부서
select department_id, count(*) 
from employees 
where department_id is not null 
group by department_id
having count(*) = 45;
-- 4. 부서별 사원수를 조회했을 때 가장 인원수가 많은 부서의 아이디와 인원수를 조회하기
select department_id, count(*) 
from employees 
where department_id is not null 
group by department_id
having count(*) = (select max(count(*))
                   from employees 
                   where department_id is not null 
                   group by department_id);
                   
-- 단일행 서브쿼리 연습
-- Neena와 같은 해에 입사한 사원들의 아이디, 이름, 입사일 조회하기
select employee_id, first_name, hire_date
from employees 
where to_char(hire_date, 'yyyy') = (select to_char(hire_date, 'yyyy')
                                    from employees 
                                    where first_name = 'Neena');
                                    
-- Neena와 같은 해에 입사한 사원중에서 전체 사원의 평균급여보다 급여를 많이 받는
-- 사원의 아이디, 이름, 입사일, 급여를 조회하기
select employee_id, first_name, hire_date, salary
from employees 
where to_char(hire_date, 'yyyy') = (select to_char(hire_date, 'yyyy')
                                    from employees 
                                    where first_name = 'Neena')
and salary > (select avg(salary)
              from employees);
              
-- Neena의 상사가 소속되어 있는 부서와 같은 부서에서 근무하는 사원의 아이디,
-- 이름, 직종, 부서아이디를 조회하기
select employee_id, first_name, job_id, department_id
from employees 
where department_id = (select department_id -- 니나의 상사가 소속된 부서의 아이디
                       from employees 
                       where employee_id = (select manager_id -- 니나의 상사
                                            from employees
                                            where first_name = 'Neena'));
                                            
-- 60번 부서에 소속된 사원들의 급여를 인상시키기
-- (인상액은 전체 사원 평균급여의 10%, 소수점이하는 반올림한다.)
update employees 
set 
	salary = salary + (select round(avg(salary)*0.1) 
	                   from employees)
where department_id = 60;


-- 다중행 서브쿼리 연습하기
-- 100 상사에게 보고하는 직원이 자신의 상사인 사원들의 아이디, 이름, 상사의 아이디를 조회하기
select employee_id, first_name, manager_id
from employees 
where manager_id in (select employee_id 
                     from employees 
                     where manager_id = 100);
                     
-- 직종이 변경된 적이 있는 직원의 아이디, 이름, 소속부서아이디를 조회하기
select employee_id, first_name, department_id
from employees 
where employee_id in (select distinct employee_id 
                      from job_history);
                      
-- 'Seattle'l에 소속부서가 있는 사원들의 사원아이디e, 이름e, 부서아이디e를 조회하기
select employee_id, first_name, department_id
from employees 
where department_id in (select department_id 
                        from departments 
                        where location_id in (select location_id 
                                              from locations 
                                              where city = 'Seattle'));
                                              
-- 'Steven'의 급여보다 많은 급여를 받는 사원들의 아이디, 이름, 급여를 조회하기
-- 크다, 작다와 같은 비교연산자를 사용할 때는 서브쿼리의 연산결과가 반드시 단일행이어야 한다.
select employee_id, first_name, salary
from employees 
where salary > (select salary 
                from employees 
                where employee_id = 100); -- 서브쿼리의 조회결과가 다중행이어서 오류발생
=======================0510=============================
------------------상호연관, 스칼라 서브쿼리---------------------------
-- 서브쿼리안에서 메인 쿼리의 컬럼이 사용되는 서브쿼리다.
-- 메인쿼리가 실행될 때마다 서브쿼리가 실행된다.
-- 상호연관 서브쿼리는 조회된 행의 갯수만큼 실행된다.
 
-- 자신이 소속되어 있는 부서의 평균급여보다 급여를 많이 받은 사원을 조회하기
select O.employee_id, O.first_name, O.salary
from employees O
where O.salary > (select avg(I.salary)
                  from employees I
                  where I.department_id = O.department_id);
                  
-- 사용자아이디, 이름, 급여, 자신이 소속된 부서의 평균급여를 조회하기
select O.employee_id, O.first_name, O.department_id, O.salary, 
       (select trunc(avg(I.salary)) 
        from employees I 
        where I.department_id = O.department_id) avg_salary
from employees O;

-- 부서아이디, 부서명, 해당부서의 관리자 이름, 소속된 사원수를 조회하기 
select O.department_id, O.department_name, O.manager_id,
       (select I.first_name
        from employees I 
        where I.employee_id = O.manager_id) as manager_name,
       (select count(*) 
        from employees I 
        where I.department_id = O.department_id) as employee_cnt
from departments O;


-- 스칼라 서브쿼리
-- 서브쿼리의 실행결과가 단일행-단일컬럼인 경우(오직 값이 하나만 조회되는 서브쿼리)
-- 사원아이디, 이름, 급여, 사원전체평균급여를 조회하기
select O.employee_id, O.first_name, O.salary, 
       (select trunc(avg(I.salary)) from employees I) avg_salary
from employees O;

-- 스칼라 서브쿼리를 update문에서 사용하기
-- 사원들의 급여를 전체사원의 평균급여의 10%만큼 인상시키기
update employees 
set 
   salary = salary + (select trunc(avg(salary)*0.1) from employees);

-- 스칼라 서브쿼리를 insert문에서 사용하기
-- 새로운 사원정보를 추가하기
insert into employees
(employee_id, first_name, last_name, email, phone_number, 
 hire_date, job_id, salary, commission_pct, manager_id, department_id)
values 
(employees_seq.nextval, 'Gildong', 'Hong', 'GILDONG', '010.1111.2222', 
 sysdate, 'IT_PROG', (select min_salary from jobs where job_id = 'IT_PROG'), null, 103, 60);
 
 
 -- 뷰(가상의 테이블)
 -- 부서 상세정보를 제공하는 가상의 테이블 생성하기
 -- 부서 상세정보 - 부서아이디d, 부서명d, 관리자 아이디d-e, 관리자이름e, 
 -- 부서에 소속된 사원수e, 부서의 소재지l, 주소l
 create or replace view departments_detail_view
 as 
 select D.department_id, D.department_name, D.manager_id, E.first_name, E.last_name,
        L.city, L.street_address, 
        (select count(*) from employees I where I.department_id = D.department_id) emp_cnt
 from departments D, employees E, locations L 
 where D.manager_id = E.employee_id(+)
 and D.location_id = L.location_id;
 
-- 60번 부서의 상세정보 조회하기
-- View 사용하기 전
 select D.department_id, D.department_name, D.manager_id, E.first_name, E.last_name,
        L.city, L.street_address, 
        (select count(*) from employees I where I.department_id = D.department_id) emp_cnt
 from departments D, employees E, locations L 
 where D.manager_id = E.employee_id(+)
 and D.location_id = L.location_id
 and D.department_id = 60;
-- View 사용한 후
select department_id, department_name, manager_id, first_name, last_name, 
       city, street_address, emp_cnt
from departments_detail_view
where department_id = 60;

-- 사원의 상세정보를 제공하는 뷰 생성하기
-- 사원아이디, 이름, 이메일, 전화번호, 입사일, 근무개월수, 근무년수, 급여, 커미션, 급여등급,
-- 연봉, 상사의 아이디, 상사이름, 직종아이디, 직종제목, 부서아이디, 부서명, 부서관리자이름
create or replace view employees_detail_view
as
select E.employee_id as emp_id,
   E.first_name || ', ' || E.last_name as full_name,
   E.email, 
   E.phone_number, 
   E.hire_date, 
   trunc(months_between(sysdate, E.hire_date)) work_months,
   trunc(months_between(sysdate, E.hire_date)/12) working_year,
   E.salary, 
   E.commission_pct, 
   G.grade, 
   E.salary*12+E.salary*12*nvl(E.commission_pct, 0) annual_salary,
   M.employee_id as manager_id,
   M.first_name || ', ' || M.last_name as manager_name,
   E.job_id,
   J.job_title, 
   E.department_id,
   D.department_name,
   DM.employee_id dept_manager_id, 
   DM.first_name || ', ' || DM.last_name as dept_manager_name
from employees E, salary_grade G, employees M, jobs J, departments D, employees DM
where E.salary >= G.min_salary and E.salary <= G.max_salary 
and E.manager_id = M.employee_id(+)
and E.job_id = J.job_id 
and E.department_id = D.department_id 
and D.manager_id = DM.employee_id(+)
with read only;

--200사원의 아이디, 이름, 급여, 급여등급, 연봉, 직종아이디, 소속부서명 조회
select emp_id, full_name, salary, grade, annual_grade, job_id, department_name
from employees_detail_view
where emp_id = 200;

-- 급여등급별 사원수를 조회하기
SELECT grade, count(*)
FROM EMPLOYEES_DETAIL_VIEW
GROUP BY grade
ORDER BY grade;

-- 입사일 기준 근무년수가 15년 이상인 사원의 아이디, 이름, 입사일, 근무년수를 조회하기
SELECT emp_id, full_name, hire_date, working_year
FROM employees_detail_view
WHERE working_year >= 15
ORDER BY working_year DESC;


— 연봉이 10만불 이상인 사원의 아이디, 이름, 급여, 급여등급, 연봉, 직종을 조회하기
SELECT emp_id, full_name, salary, grade, annual_salary, job_id
FROM EMPLOYEES_DETAIL_VIEW
WHERE annual_salary >= 200000;

-- 인라인 뷰
-- 직종별 사원수를 조회하기
-- 직종아이디, 직종제목, 직종최소급여, 직종최대급여, 사원수
-- select job_id, count(*)
-- from employees
-- group job_id
SELECT A.job_id, B.job_title, B.min_salary, B.max_salary, A.cnt
FROM (SELECT job_id, count(*) cnt       --함수로 데이터를 조회 했을 경우 별칭을 필수로 적어야 한다
	  FROM EMPLOYEES
	  GROUP BY job_id) A, jobs B
WHERE A.job_id = B.job_id;

--top-n분석
-- 지정된 칼럼의 값을 기준으로 행을 정렬하고, 상위 n개의 열을 조회하는 것

-- 연봉에 대한 내림차순으로 정렬했을 때 상위 3명의 아이디, 이름, 연봉을 조회하기
select emp_id, full_name, annual_salary
from ( select emp_id, full_name, annual_salary 
       from employees_detail_view
       order by annual_salary desc)
where rownum>=1;


-- 직종별 인원수를 조회했을 때 인원수에 대한 내림차순으로 
select rownum,job_id, cnt
from (select job_id, count(*) cnt
      from employees
      group by job_id
      order by cnt desc
      )
where rownum<=3;
--where rownum>=3; top_n 분석은 위에서만 조회됨으로 왼쪽과 같이는 사용이 불가하다.


-- 직종별 인원수를 조회했을 때, 인원수를 기준으로 내림차순 정렬하고, 4~7번째 해당하는 행 조회
-- 범위로 구하려면 아래와 같이 인라인 뷰를 반복 적용 해주어야 한다.
select rownum,job_id, cnt
    from(select rownum ranking, job_id, cnt
        from (select job_id, count(*) cnt --count(*)를 바깥에서 쓰기위해선 별칭이 필수
            from employees
            group by job_id
            order by cnt desc)
        )
where ranking>=5 and ranking<=10;