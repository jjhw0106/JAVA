========================================0511===============================
--ㅇ 분석함수
--  1. TOP-N분석과 분석함수 사용하기
--    월급에 대한 내림차순으로 정렬했을 때,
--    급여를 가장 많이 받은 사람 3명의 아이디, 이름, 급여 조회하기
	SELECT ROWNUM, EMPLOYEE_ID, FIRST_NAME, SALARY
	FROM(SELECT EMPLOYEE_ID, FIRST_NAME, SALARY
	         FROM EMPLOYEES
	         ORDER BY SALARY DESC)
	WHERE ROWNUM<=3;
--  2. RANK()
--     RANK(), DENSE_RANK(), ROWNUMBER()
--     SELECT 분석함수() OVER([PARTITION BY 컬럼][ORDER BY 컬럼]), 컬럼, 컬럼, 컬럼
--     FROM 테이블명
SELECT RANK() OVER (ORDER BY SALARY DESC) RANKING, 
       DENSE_RANK() OVER (ORDER BY SALARY DESC)DENSE_RANKING,
       ROW_NUMBER() OVER (ORDER BY SALARY DESC) ROW_NUMBER,
       EMPLOYEE_ID, FIRST_NAME, SALARY
FROM EMPLOYEES;

SELECT RANK() OVER (PARTITION BY DEPARTMENT_ID ORDER BY SALARY DESC) RANKING,
    EMPLOYEE_ID, FIRST_NAME,DEPARTMENT_ID, SALARY
FROM EMPLOYEES
ORDER BY DEPARTMENT_ID;

--부서별 랭킹
SELECT DEPARTMENT_ID, EMPLOYEE_ID, FIRST_NAME, SALARY
FROM       (SELECT RANK() OVER (PARTITION BY DEPARTMENT_ID ORDER BY SALARY DESC) RANKING,
                EMPLOYEE_ID, FIRST_NAME,DEPARTMENT_ID, SALARY
            FROM EMPLOYEES
            ORDER BY DEPARTMENT_ID)
WHERE RANKING = 1
AND DEPARTMENT_ID IS NOT NULL;

--입사년도별 급여를 가장 많이 받는 사람 조회하기
SELECT HIRE_YEAR, EMPLOYEE_ID, FIRST_NAME, SALARY
FROM (SELECT RANK() OVER (PARTITION BY TO_CHAR(HIRE_DATE, 'YYYY' ) ORDER BY SALARY DESC) RANKING,
       TO_CHAR(HIRE_DATE, 'YYYY') HIRE_YEAR, 
       EMPLOYEE_ID, 
       FIRST_NAME,
       SALARY
       FROM EMPLOYEES)
WHERE RANKING = 1;
